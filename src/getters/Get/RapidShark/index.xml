index:	0
title:	RapidShark
desc:	[RK] <a href="http://www.rapidshark.pl/">"http://www.rapidshark.pl/"</a>

body:	
	<p>Check <a href="http://www.rapidshark.pl/tos.html">terms of service</a>.</p>
<p>Status: OK 2010-03-12</p>
	<pre># $Id: RapidShark 11265 2010-03-12 20:57:48Z sparky $
# Get::RapidShark - File getter plugin for rsget.pl
#
# 2009-2010 (c) Przemysław Iskra &lt;sparky@pld-linux.org&gt;
#		This program is free software,
# you may distribute it under GPL v2 or newer.

name: RapidShark
short: RK
web: "http://www.rapidshark.pl/"
tos: "http://www.rapidshark.pl/tos.html"
uri: qr{rapidshark\.pl/[a-z0-9]{12}}
slots: max
status: OK 2010-03-12

unify:
	return "http://www.rapidshark.pl/$1"
		if m{rapidshark\.pl/([a-z0-9]{12})}

start:
	GET( $-{_uri} );

	ERROR( "file not found" )
		if m{&lt;b&gt;(Plik nie został odnaleziony|File Not Found|Datei nicht gefunden)&lt;/b&gt;};
	ERROR( "file not found" )
		if m{&lt;font class="err"&gt;No such file};

	! m{&lt;font style="font-size:12px;"&gt;Probujesz otworzyć adres &lt;font color="red"&gt;.*/(.*?)&lt;/font&gt; \(($STDSIZE)\)&lt;/font&gt;};
	INFO( name =&gt; $1, asize =&gt; $2 );

	! my $form = $self-&gt;form( match =&gt; { body =&gt; qr/"method_free"/ } );
	! $form-&gt;select( method_free =&gt; 0 );

	CLICK( $form-&gt;post() );

	if ( /Muszisz poczekać (.*) aby pobrać następny plik/ ) {
		$_ = $1;
		my $wait = 0;
		$wait += 60 * 60 * $1 if /(\d+) (hour|godzin)/;
		$wait += 60 * $1 if /(\d+) minut/;
		$wait += $1 if /(\d+) (second|sekund)/;
		RESTART( $wait, "free limit reached" );
	}

stage_captcha:
	! $-{form} = $self-&gt;form( name =&gt; "F1" );

	! m{&lt;span id="countdown"&gt;(\d+)&lt;/span&gt;};
	$-{wait} = $1;

	! m{&lt;img src="(http://www\.rapidshark\.pl/captchas/.*?jpg)"&gt;};
	GET( $1, keep_referer =&gt; 1 );

	CAPTCHA(
		qr/[0-9]{4}/,
		process =&gt; \&amp;rk_decaptcha
	);

	RESTART( 1, "captcha unsolved" ) unless $_;

	$-{form}-&gt;set( code =&gt; $_ );

	WAIT( $-{wait}, "waiting for download link" );
	
	CLICK( $-{form}-&gt;post() );

	if ( /{lang_dod_7}/ ) {
		CAPTCHA_RESULT( "FAIL" );
		GOTO stage_captcha;
	}

	! m{&lt;a href="(http://shark\d+\.rapidshark\.pl/cgi-bin/dl\.cgi/.*?/.*?)"&gt;};

	CLICK_DOWNLOAD( $1 );


perl:

sub rk_filter_spots # remove dark pixels
{
	my $pix = shift;

	my $lim = 100;
	return if $pix-&gt;isAbove( 10 );

	my $whites = 0;
	my @sides = ( $pix-&gt;up, $pix-&gt;down, $pix-&gt;left, $pix-&gt;right );
	foreach my $spix ( @sides ) {
		return unless $spix; # borders are taken care of
		$whites++ if $spix-&gt;isAbove( $lim );
	}
	return if $whites &lt; 4;
	my @corners = ( $sides[0]-&gt;left, $sides[0]-&gt;right,
					$sides[1]-&gt;left, $sides[1]-&gt;right );
	foreach my $cpix ( @corners ) {
		$whites++ if $cpix-&gt;isAbove( $lim );
	}
	
	$pix-&gt;set( 0xff ) if $whites &gt;= 7;
	return;
}

sub rk_decaptcha
{
	my $img = shift;
	$img-&gt;color_filter( sub { $_[0] } );
	$img = $img-&gt;crop( x1 =&gt; 21, y1 =&gt; 7, x2 =&gt; 57, y2 =&gt; 18 );
	$img-&gt;set_border( 255 );
	$img-&gt;luma_emphasize( 50, 80 );
	$img-&gt;pix_filter( \&amp;rk_filter_spots );
	my $ocr = $img-&gt;doublesize-&gt;ocr();
	$ocr =~ s/[^0-9]+//;
	return $ocr;
}

# vim: filetype=perl:ts=4:sw=4
</pre>
